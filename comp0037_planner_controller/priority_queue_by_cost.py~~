from Queue import PriorityQueue
COST_POS = 0
CELL_POS = 1

# I have seen an email saying that use the python built-in class priority queue. I have not tried that one myself, maybe some one can try that if it is of interest.
class PriorityQueueByCost(object):
    def __init__(self):
        self._queue = PriorityQueue()

    # enqueue cell by how costEvalFunc is defined
    def enqueue(self, cell, cmpCell = None, costEvalFunc = None):
        if costEvalFunc:
            cost = costEvalFunc(cell, cmpCell)
            print "enqueueing {} to queue {}, cost is {}\n".format(cell, self._queue, cost) # debug del
            self._queue.put((cost, cell,))

        else:
            raise TypeError("I expect a cost evaluation is defined for using this .*ByCost class")

    def pop(self): #sorry for using the wrong name, possibly fix it to dequeue later
        cell = self._queue.get()[CELL_POS]
        print "dequeueing {} to queue {}\n".format(cell, self._queue) # debug del
        return cell

    def updateCostOfCell(self, cost, cell):  # for updating the queue after the resolving the resolveDuplicate
        print "updating {} to queue {}\n".format(cell, self._queue) # debug del

        i = 0
        while i < len(self._queue): # sequential search. Try binary search etc. if have time
            cell_local = self._queue[i][CELL_POS]

            if cell_local == cell:
                del self._queue[i]
            else:
                i += 1

        self._queue.put((cost, cell,))
        print "finish updating {} to queue {}\n".format(cell, self._queue) # debug del
        return

    def __bool__(self):
        return bool(self._queue)
    __nonzero__ = __bool__ # for compatible with python 2.7
